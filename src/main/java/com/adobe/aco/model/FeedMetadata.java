/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/

package com.adobe.aco.model;

import com.adobe.aco.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Metadata information for a product attribute. */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-05-23T13:16:12.231143+02:00[Europe/Madrid]",
        comments = "Generator version: 7.4.0")
public class FeedMetadata {
    public static final String SERIALIZED_NAME_CODE = "code";

    @SerializedName(SERIALIZED_NAME_CODE)
    private String code;

    public static final String SERIALIZED_NAME_SCOPE = "scope";

    @SerializedName(SERIALIZED_NAME_SCOPE)
    private Scope scope;

    /** Gets or Sets visibleIn */
    @JsonAdapter(VisibleInEnum.Adapter.class)
    public enum VisibleInEnum {
        PRODUCT_DETAIL("PRODUCT_DETAIL"),

        PRODUCT_LISTING("PRODUCT_LISTING"),

        SEARCH_RESULTS("SEARCH_RESULTS"),

        PRODUCT_COMPARE("PRODUCT_COMPARE");

        private String value;

        VisibleInEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static VisibleInEnum fromValue(String value) {
            for (VisibleInEnum b : VisibleInEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<VisibleInEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final VisibleInEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public VisibleInEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return VisibleInEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            VisibleInEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_VISIBLE_IN = "visibleIn";

    @SerializedName(SERIALIZED_NAME_VISIBLE_IN)
    private List<VisibleInEnum> visibleIn;

    public static final String SERIALIZED_NAME_LABEL = "label";

    @SerializedName(SERIALIZED_NAME_LABEL)
    private String label;

    /** Data type */
    @JsonAdapter(DataTypeEnum.Adapter.class)
    public enum DataTypeEnum {
        TEXT("TEXT"),

        DECIMAL("DECIMAL"),

        INTEGER("INTEGER"),

        BOOLEAN("BOOLEAN");

        private String value;

        DataTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static DataTypeEnum fromValue(String value) {
            for (DataTypeEnum b : DataTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<DataTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return DataTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            DataTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";

    @SerializedName(SERIALIZED_NAME_DATA_TYPE)
    private DataTypeEnum dataType;

    public static final String SERIALIZED_NAME_FILTERABLE = "filterable";

    @SerializedName(SERIALIZED_NAME_FILTERABLE)
    private Boolean filterable;

    public static final String SERIALIZED_NAME_SORTABLE = "sortable";

    @SerializedName(SERIALIZED_NAME_SORTABLE)
    private Boolean sortable;

    public static final String SERIALIZED_NAME_SEARCHABLE = "searchable";

    @SerializedName(SERIALIZED_NAME_SEARCHABLE)
    private Boolean searchable;

    public static final String SERIALIZED_NAME_SEARCH_WEIGHT = "searchWeight";

    @SerializedName(SERIALIZED_NAME_SEARCH_WEIGHT)
    private Float searchWeight;

    /** Gets or Sets searchTypes */
    @JsonAdapter(SearchTypesEnum.Adapter.class)
    public enum SearchTypesEnum {
        AUTOCOMPLETE("AUTOCOMPLETE"),

        CONTAINS("CONTAINS"),

        STARTS_WITH("STARTS_WITH");

        private String value;

        SearchTypesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SearchTypesEnum fromValue(String value) {
            for (SearchTypesEnum b : SearchTypesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<SearchTypesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SearchTypesEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public SearchTypesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return SearchTypesEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            SearchTypesEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_SEARCH_TYPES = "searchTypes";

    @SerializedName(SERIALIZED_NAME_SEARCH_TYPES)
    private List<SearchTypesEnum> searchTypes;

    public FeedMetadata() {}

    public FeedMetadata code(String code) {
        this.code = code;
        return this;
    }

    /**
     * Attribute code
     *
     * @return code
     */
    @javax.annotation.Nonnull
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public FeedMetadata scope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     */
    @javax.annotation.Nonnull
    public Scope getScope() {
        return scope;
    }

    public void setScope(Scope scope) {
        this.scope = scope;
    }

    public FeedMetadata visibleIn(List<VisibleInEnum> visibleIn) {
        this.visibleIn = visibleIn;
        return this;
    }

    public FeedMetadata addVisibleInItem(VisibleInEnum visibleInItem) {
        if (this.visibleIn == null) {
            this.visibleIn = new ArrayList<>();
        }
        this.visibleIn.add(visibleInItem);
        return this;
    }

    /**
     * Determines how the attribute is used on the storefront. * &#x60;PRODUCT_DETAIL&#x60;: Product
     * attribute is visible on the Product Detail Page. * &#x60;PRODUCT_LISTING&#x60;: Product
     * attribute is visible on Product Listing Page. * &#x60;SEARCH_RESULTS&#x60;: Product attribute
     * is visible on Search Results Page. * &#x60;PRODUCT_COMPARE&#x60;: Product attribute is
     * visible on Product Compare Page.
     *
     * @return visibleIn
     */
    @javax.annotation.Nullable
    public List<VisibleInEnum> getVisibleIn() {
        return visibleIn;
    }

    public void setVisibleIn(List<VisibleInEnum> visibleIn) {
        this.visibleIn = visibleIn;
    }

    public FeedMetadata label(String label) {
        this.label = label;
        return this;
    }

    /**
     * Label for the attribute that is displayed in user interfaces.
     *
     * @return label
     */
    @javax.annotation.Nonnull
    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public FeedMetadata dataType(DataTypeEnum dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Data type
     *
     * @return dataType
     */
    @javax.annotation.Nonnull
    public DataTypeEnum getDataType() {
        return dataType;
    }

    public void setDataType(DataTypeEnum dataType) {
        this.dataType = dataType;
    }

    public FeedMetadata filterable(Boolean filterable) {
        this.filterable = filterable;
        return this;
    }

    /**
     * Indicates whether the attribute can be used to filter products.
     *
     * @return filterable
     */
    @javax.annotation.Nullable
    public Boolean getFilterable() {
        return filterable;
    }

    public void setFilterable(Boolean filterable) {
        this.filterable = filterable;
    }

    public FeedMetadata sortable(Boolean sortable) {
        this.sortable = sortable;
        return this;
    }

    /**
     * Indicates whether the attribute can be used to sort products.
     *
     * @return sortable
     */
    @javax.annotation.Nullable
    public Boolean getSortable() {
        return sortable;
    }

    public void setSortable(Boolean sortable) {
        this.sortable = sortable;
    }

    public FeedMetadata searchable(Boolean searchable) {
        this.searchable = searchable;
        return this;
    }

    /**
     * Indicates whether the attribute value can be used in search queries to filter results.
     *
     * @return searchable
     */
    @javax.annotation.Nullable
    public Boolean getSearchable() {
        return searchable;
    }

    public void setSearchable(Boolean searchable) {
        this.searchable = searchable;
    }

    public FeedMetadata searchWeight(Float searchWeight) {
        this.searchWeight = searchWeight;
        return this;
    }

    /**
     * The weight associated with a searchable attribute. Attributes with a greater weight are
     * returned before attributes with a lower weight.
     *
     * @return searchWeight
     */
    @javax.annotation.Nullable
    public Float getSearchWeight() {
        return searchWeight;
    }

    public void setSearchWeight(Float searchWeight) {
        this.searchWeight = searchWeight;
    }

    public FeedMetadata searchTypes(List<SearchTypesEnum> searchTypes) {
        this.searchTypes = searchTypes;
        return this;
    }

    public FeedMetadata addSearchTypesItem(SearchTypesEnum searchTypesItem) {
        if (this.searchTypes == null) {
            this.searchTypes = new ArrayList<>();
        }
        this.searchTypes.add(searchTypesItem);
        return this;
    }

    /**
     * Search types associated with this attribute, for example: &#x60;autocomplete&#x60;,
     * &#x60;starts_with&#x60;, and so on.
     *
     * @return searchTypes
     */
    @javax.annotation.Nullable
    public List<SearchTypesEnum> getSearchTypes() {
        return searchTypes;
    }

    public void setSearchTypes(List<SearchTypesEnum> searchTypes) {
        this.searchTypes = searchTypes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedMetadata feedMetadata = (FeedMetadata) o;
        return Objects.equals(this.code, feedMetadata.code)
                && Objects.equals(this.scope, feedMetadata.scope)
                && Objects.equals(this.visibleIn, feedMetadata.visibleIn)
                && Objects.equals(this.label, feedMetadata.label)
                && Objects.equals(this.dataType, feedMetadata.dataType)
                && Objects.equals(this.filterable, feedMetadata.filterable)
                && Objects.equals(this.sortable, feedMetadata.sortable)
                && Objects.equals(this.searchable, feedMetadata.searchable)
                && Objects.equals(this.searchWeight, feedMetadata.searchWeight)
                && Objects.equals(this.searchTypes, feedMetadata.searchTypes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                code,
                scope,
                visibleIn,
                label,
                dataType,
                filterable,
                sortable,
                searchable,
                searchWeight,
                searchTypes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedMetadata {\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("    visibleIn: ").append(toIndentedString(visibleIn)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
        sb.append("    filterable: ").append(toIndentedString(filterable)).append("\n");
        sb.append("    sortable: ").append(toIndentedString(sortable)).append("\n");
        sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
        sb.append("    searchWeight: ").append(toIndentedString(searchWeight)).append("\n");
        sb.append("    searchTypes: ").append(toIndentedString(searchTypes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("code");
        openapiFields.add("scope");
        openapiFields.add("visibleIn");
        openapiFields.add("label");
        openapiFields.add("dataType");
        openapiFields.add("filterable");
        openapiFields.add("sortable");
        openapiFields.add("searchable");
        openapiFields.add("searchWeight");
        openapiFields.add("searchTypes");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("code");
        openapiRequiredFields.add("scope");
        openapiRequiredFields.add("label");
        openapiRequiredFields.add("dataType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FeedMetadata
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FeedMetadata.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FeedMetadata is not found in the empty JSON string",
                                FeedMetadata.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FeedMetadata.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FeedMetadata` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FeedMetadata.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("code").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `code` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("code").toString()));
        }
        // validate the required field `scope`
        Scope.validateJsonElement(jsonObj.get("scope"));
        // ensure the optional json data is an array if present
        if (jsonObj.get("visibleIn") != null
                && !jsonObj.get("visibleIn").isJsonNull()
                && !jsonObj.get("visibleIn").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `visibleIn` to be an array in the JSON string but got `%s`",
                            jsonObj.get("visibleIn").toString()));
        }
        if (!jsonObj.get("label").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `label` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("label").toString()));
        }
        if (!jsonObj.get("dataType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `dataType` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("dataType").toString()));
        }
        // validate the required field `dataType`
        DataTypeEnum.validateJsonElement(jsonObj.get("dataType"));
        // ensure the optional json data is an array if present
        if (jsonObj.get("searchTypes") != null
                && !jsonObj.get("searchTypes").isJsonNull()
                && !jsonObj.get("searchTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `searchTypes` to be an array in the JSON string but got `%s`",
                            jsonObj.get("searchTypes").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FeedMetadata.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FeedMetadata' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FeedMetadata> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FeedMetadata.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FeedMetadata>() {
                        @Override
                        public void write(JsonWriter out, FeedMetadata value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FeedMetadata read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FeedMetadata given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FeedMetadata
     * @throws IOException if the JSON string is invalid with respect to FeedMetadata
     */
    public static FeedMetadata fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FeedMetadata.class);
    }

    /**
     * Convert an instance of FeedMetadata to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
