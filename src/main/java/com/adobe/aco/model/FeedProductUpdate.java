/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/

package com.adobe.aco.model;

import com.adobe.aco.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** FeedProductUpdate */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-05-23T13:16:12.231143+02:00[Europe/Madrid]",
        comments = "Generator version: 7.4.0")
public class FeedProductUpdate {
    public static final String SERIALIZED_NAME_SKU = "sku";

    @SerializedName(SERIALIZED_NAME_SKU)
    private String sku;

    public static final String SERIALIZED_NAME_SCOPE = "scope";

    @SerializedName(SERIALIZED_NAME_SCOPE)
    private Scope scope;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_SLUG = "slug";

    @SerializedName(SERIALIZED_NAME_SLUG)
    private String slug;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";

    @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
    private String shortDescription;

    /**
     * Indicates whether the product is visible on the storefront. The value is
     * \&quot;Enabled\&quot; if it is visible, and \&quot;Disabled\&quot; if it is not visible.
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        ENABLED("ENABLED"),

        DISABLED("DISABLED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            StatusEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private StatusEnum status;

    /** Gets or Sets visibleIn */
    @JsonAdapter(VisibleInEnum.Adapter.class)
    public enum VisibleInEnum {
        CATALOG("CATALOG"),

        SEARCH("SEARCH");

        private String value;

        VisibleInEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static VisibleInEnum fromValue(String value) {
            for (VisibleInEnum b : VisibleInEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<VisibleInEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final VisibleInEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public VisibleInEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return VisibleInEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            VisibleInEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_VISIBLE_IN = "visibleIn";

    @SerializedName(SERIALIZED_NAME_VISIBLE_IN)
    private List<VisibleInEnum> visibleIn;

    public static final String SERIALIZED_NAME_META_TAGS = "metaTags";

    @SerializedName(SERIALIZED_NAME_META_TAGS)
    private List<ProductMetaAttribute> metaTags;

    public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";

    @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
    private List<ProductAttribute> attributes;

    public static final String SERIALIZED_NAME_IMAGES = "images";

    @SerializedName(SERIALIZED_NAME_IMAGES)
    private List<ProductImage> images;

    public static final String SERIALIZED_NAME_LINKS = "links";

    @SerializedName(SERIALIZED_NAME_LINKS)
    private List<ProductLink> links;

    public static final String SERIALIZED_NAME_ROUTES = "routes";

    @SerializedName(SERIALIZED_NAME_ROUTES)
    private List<ProductRoutes> routes;

    public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";

    @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
    private List<ProductConfiguration> configurations;

    public static final String SERIALIZED_NAME_BUNDLES = "bundles";

    @SerializedName(SERIALIZED_NAME_BUNDLES)
    private List<ProductBundle> bundles;

    public FeedProductUpdate() {}

    public FeedProductUpdate sku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * SKU (Stock Keeping Unit) is a unique identifier for a product.
     *
     * @return sku
     */
    @javax.annotation.Nonnull
    public String getSku() {
        return sku;
    }

    public void setSku(String sku) {
        this.sku = sku;
    }

    public FeedProductUpdate scope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     */
    @javax.annotation.Nonnull
    public Scope getScope() {
        return scope;
    }

    public void setScope(Scope scope) {
        this.scope = scope;
    }

    public FeedProductUpdate name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Product name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public FeedProductUpdate slug(String slug) {
        this.slug = slug;
        return this;
    }

    /**
     * The URL key for the product.
     *
     * @return slug
     */
    @javax.annotation.Nullable
    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public FeedProductUpdate description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The main description for the product
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public FeedProductUpdate shortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }

    /**
     * A short description of the product
     *
     * @return shortDescription
     */
    @javax.annotation.Nullable
    public String getShortDescription() {
        return shortDescription;
    }

    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    public FeedProductUpdate status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Indicates whether the product is visible on the storefront. The value is
     * \&quot;Enabled\&quot; if it is visible, and \&quot;Disabled\&quot; if it is not visible.
     *
     * @return status
     */
    @javax.annotation.Nullable
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public FeedProductUpdate visibleIn(List<VisibleInEnum> visibleIn) {
        this.visibleIn = visibleIn;
        return this;
    }

    public FeedProductUpdate addVisibleInItem(VisibleInEnum visibleInItem) {
        if (this.visibleIn == null) {
            this.visibleIn = new ArrayList<>();
        }
        this.visibleIn.add(visibleInItem);
        return this;
    }

    /**
     * Storefront area where the product is visible. An empty list means that it is not visible as a
     * stand alone product. * &#x60;CATALOG&#x60;: Product is visible on Product Listing Page and
     * Product Detail Page. * &#x60;SEARCH&#x60;: Product is visible on Search Results Page and
     * Product Detail Page.
     *
     * @return visibleIn
     */
    @javax.annotation.Nullable
    public List<VisibleInEnum> getVisibleIn() {
        return visibleIn;
    }

    public void setVisibleIn(List<VisibleInEnum> visibleIn) {
        this.visibleIn = visibleIn;
    }

    public FeedProductUpdate metaTags(List<ProductMetaAttribute> metaTags) {
        this.metaTags = metaTags;
        return this;
    }

    public FeedProductUpdate addMetaTagsItem(ProductMetaAttribute metaTagsItem) {
        if (this.metaTags == null) {
            this.metaTags = new ArrayList<>();
        }
        this.metaTags.add(metaTagsItem);
        return this;
    }

    /**
     * Meta attributes that are specified in &lt;meta&gt; tags.
     *
     * @return metaTags
     */
    @javax.annotation.Nullable
    public List<ProductMetaAttribute> getMetaTags() {
        return metaTags;
    }

    public void setMetaTags(List<ProductMetaAttribute> metaTags) {
        this.metaTags = metaTags;
    }

    public FeedProductUpdate attributes(List<ProductAttribute> attributes) {
        this.attributes = attributes;
        return this;
    }

    public FeedProductUpdate addAttributesItem(ProductAttribute attributesItem) {
        if (this.attributes == null) {
            this.attributes = new ArrayList<>();
        }
        this.attributes.add(attributesItem);
        return this;
    }

    /**
     * A list of product attributes.
     *
     * @return attributes
     */
    @javax.annotation.Nullable
    public List<ProductAttribute> getAttributes() {
        return attributes;
    }

    public void setAttributes(List<ProductAttribute> attributes) {
        this.attributes = attributes;
    }

    public FeedProductUpdate images(List<ProductImage> images) {
        this.images = images;
        return this;
    }

    public FeedProductUpdate addImagesItem(ProductImage imagesItem) {
        if (this.images == null) {
            this.images = new ArrayList<>();
        }
        this.images.add(imagesItem);
        return this;
    }

    /**
     * A list of product images.
     *
     * @return images
     */
    @javax.annotation.Nullable
    public List<ProductImage> getImages() {
        return images;
    }

    public void setImages(List<ProductImage> images) {
        this.images = images;
    }

    public FeedProductUpdate links(List<ProductLink> links) {
        this.links = links;
        return this;
    }

    public FeedProductUpdate addLinksItem(ProductLink linksItem) {
        if (this.links == null) {
            this.links = new ArrayList<>();
        }
        this.links.add(linksItem);
        return this;
    }

    /**
     * A list of linked SKUs. For product variants, this is a required field that establishes a link
     * between a product variant and the corresponding configurable product. &#x60;VARIANT_OF&#x60;
     * link type must be specified to establish a connection to the configurable product SKU.
     *
     * @return links
     */
    @javax.annotation.Nullable
    public List<ProductLink> getLinks() {
        return links;
    }

    public void setLinks(List<ProductLink> links) {
        this.links = links;
    }

    public FeedProductUpdate routes(List<ProductRoutes> routes) {
        this.routes = routes;
        return this;
    }

    public FeedProductUpdate addRoutesItem(ProductRoutes routesItem) {
        if (this.routes == null) {
            this.routes = new ArrayList<>();
        }
        this.routes.add(routesItem);
        return this;
    }

    /**
     * A list of product routes.
     *
     * @return routes
     */
    @javax.annotation.Nullable
    public List<ProductRoutes> getRoutes() {
        return routes;
    }

    public void setRoutes(List<ProductRoutes> routes) {
        this.routes = routes;
    }

    public FeedProductUpdate configurations(List<ProductConfiguration> configurations) {
        this.configurations = configurations;
        return this;
    }

    public FeedProductUpdate addConfigurationsItem(ProductConfiguration configurationsItem) {
        if (this.configurations == null) {
            this.configurations = new ArrayList<>();
        }
        this.configurations.add(configurationsItem);
        return this;
    }

    /**
     * Composite products, such as configurable products, must provide a list of product options
     * that a shopper can select (for example, \&quot;color\&quot;, \&quot;size\&quot;, etc.).
     *
     * @return configurations
     */
    @javax.annotation.Nullable
    public List<ProductConfiguration> getConfigurations() {
        return configurations;
    }

    public void setConfigurations(List<ProductConfiguration> configurations) {
        this.configurations = configurations;
    }

    public FeedProductUpdate bundles(List<ProductBundle> bundles) {
        this.bundles = bundles;
        return this;
    }

    public FeedProductUpdate addBundlesItem(ProductBundle bundlesItem) {
        if (this.bundles == null) {
            this.bundles = new ArrayList<>();
        }
        this.bundles.add(bundlesItem);
        return this;
    }

    /**
     * Composite products, such as bundle products, must include a list of individual products that
     * are part of the bundle, organized into groups (for example, \&quot;shirts\&quot;,
     * \&quot;pants\&quot;, \&quot;accessories\&quot;).
     *
     * @return bundles
     */
    @javax.annotation.Nullable
    public List<ProductBundle> getBundles() {
        return bundles;
    }

    public void setBundles(List<ProductBundle> bundles) {
        this.bundles = bundles;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedProductUpdate feedProductUpdate = (FeedProductUpdate) o;
        return Objects.equals(this.sku, feedProductUpdate.sku)
                && Objects.equals(this.scope, feedProductUpdate.scope)
                && Objects.equals(this.name, feedProductUpdate.name)
                && Objects.equals(this.slug, feedProductUpdate.slug)
                && Objects.equals(this.description, feedProductUpdate.description)
                && Objects.equals(this.shortDescription, feedProductUpdate.shortDescription)
                && Objects.equals(this.status, feedProductUpdate.status)
                && Objects.equals(this.visibleIn, feedProductUpdate.visibleIn)
                && Objects.equals(this.metaTags, feedProductUpdate.metaTags)
                && Objects.equals(this.attributes, feedProductUpdate.attributes)
                && Objects.equals(this.images, feedProductUpdate.images)
                && Objects.equals(this.links, feedProductUpdate.links)
                && Objects.equals(this.routes, feedProductUpdate.routes)
                && Objects.equals(this.configurations, feedProductUpdate.configurations)
                && Objects.equals(this.bundles, feedProductUpdate.bundles);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sku,
                scope,
                name,
                slug,
                description,
                shortDescription,
                status,
                visibleIn,
                metaTags,
                attributes,
                images,
                links,
                routes,
                configurations,
                bundles);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedProductUpdate {\n");
        sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    visibleIn: ").append(toIndentedString(visibleIn)).append("\n");
        sb.append("    metaTags: ").append(toIndentedString(metaTags)).append("\n");
        sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
        sb.append("    images: ").append(toIndentedString(images)).append("\n");
        sb.append("    links: ").append(toIndentedString(links)).append("\n");
        sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
        sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
        sb.append("    bundles: ").append(toIndentedString(bundles)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sku");
        openapiFields.add("scope");
        openapiFields.add("name");
        openapiFields.add("slug");
        openapiFields.add("description");
        openapiFields.add("shortDescription");
        openapiFields.add("status");
        openapiFields.add("visibleIn");
        openapiFields.add("metaTags");
        openapiFields.add("attributes");
        openapiFields.add("images");
        openapiFields.add("links");
        openapiFields.add("routes");
        openapiFields.add("configurations");
        openapiFields.add("bundles");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sku");
        openapiRequiredFields.add("scope");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FeedProductUpdate
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FeedProductUpdate.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FeedProductUpdate is not found in the empty JSON string",
                                FeedProductUpdate.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FeedProductUpdate.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FeedProductUpdate` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FeedProductUpdate.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sku` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("sku").toString()));
        }
        // validate the required field `scope`
        Scope.validateJsonElement(jsonObj.get("scope"));
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull())
                && !jsonObj.get("slug").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `slug` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("slug").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("shortDescription") != null
                        && !jsonObj.get("shortDescription").isJsonNull())
                && !jsonObj.get("shortDescription").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("shortDescription").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("status").toString()));
        }
        // validate the optional field `status`
        if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
            StatusEnum.validateJsonElement(jsonObj.get("status"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("visibleIn") != null
                && !jsonObj.get("visibleIn").isJsonNull()
                && !jsonObj.get("visibleIn").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `visibleIn` to be an array in the JSON string but got `%s`",
                            jsonObj.get("visibleIn").toString()));
        }
        if (jsonObj.get("metaTags") != null && !jsonObj.get("metaTags").isJsonNull()) {
            JsonArray jsonArraymetaTags = jsonObj.getAsJsonArray("metaTags");
            if (jsonArraymetaTags != null) {
                // ensure the json data is an array
                if (!jsonObj.get("metaTags").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `metaTags` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("metaTags").toString()));
                }

                // validate the optional field `metaTags` (array)
                for (int i = 0; i < jsonArraymetaTags.size(); i++) {
                    ProductMetaAttribute.validateJsonElement(jsonArraymetaTags.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
            JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
            if (jsonArrayattributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("attributes").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `attributes` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("attributes").toString()));
                }

                // validate the optional field `attributes` (array)
                for (int i = 0; i < jsonArrayattributes.size(); i++) {
                    ProductAttribute.validateJsonElement(jsonArrayattributes.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
            JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
            if (jsonArrayimages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("images").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `images` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("images").toString()));
                }

                // validate the optional field `images` (array)
                for (int i = 0; i < jsonArrayimages.size(); i++) {
                    ProductImage.validateJsonElement(jsonArrayimages.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
            JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
            if (jsonArraylinks != null) {
                // ensure the json data is an array
                if (!jsonObj.get("links").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `links` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("links").toString()));
                }

                // validate the optional field `links` (array)
                for (int i = 0; i < jsonArraylinks.size(); i++) {
                    ProductLink.validateJsonElement(jsonArraylinks.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("routes") != null && !jsonObj.get("routes").isJsonNull()) {
            JsonArray jsonArrayroutes = jsonObj.getAsJsonArray("routes");
            if (jsonArrayroutes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("routes").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `routes` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("routes").toString()));
                }

                // validate the optional field `routes` (array)
                for (int i = 0; i < jsonArrayroutes.size(); i++) {
                    ProductRoutes.validateJsonElement(jsonArrayroutes.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("configurations") != null && !jsonObj.get("configurations").isJsonNull()) {
            JsonArray jsonArrayconfigurations = jsonObj.getAsJsonArray("configurations");
            if (jsonArrayconfigurations != null) {
                // ensure the json data is an array
                if (!jsonObj.get("configurations").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `configurations` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("configurations").toString()));
                }

                // validate the optional field `configurations` (array)
                for (int i = 0; i < jsonArrayconfigurations.size(); i++) {
                    ProductConfiguration.validateJsonElement(jsonArrayconfigurations.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("bundles") != null && !jsonObj.get("bundles").isJsonNull()) {
            JsonArray jsonArraybundles = jsonObj.getAsJsonArray("bundles");
            if (jsonArraybundles != null) {
                // ensure the json data is an array
                if (!jsonObj.get("bundles").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `bundles` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("bundles").toString()));
                }

                // validate the optional field `bundles` (array)
                for (int i = 0; i < jsonArraybundles.size(); i++) {
                    ProductBundle.validateJsonElement(jsonArraybundles.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FeedProductUpdate.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FeedProductUpdate' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FeedProductUpdate> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FeedProductUpdate.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FeedProductUpdate>() {
                        @Override
                        public void write(JsonWriter out, FeedProductUpdate value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FeedProductUpdate read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FeedProductUpdate given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FeedProductUpdate
     * @throws IOException if the JSON string is invalid with respect to FeedProductUpdate
     */
    public static FeedProductUpdate fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FeedProductUpdate.class);
    }

    /**
     * Convert an instance of FeedProductUpdate to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
