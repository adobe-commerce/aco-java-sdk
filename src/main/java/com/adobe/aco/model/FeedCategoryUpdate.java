/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/

package com.adobe.aco.model;

import com.adobe.aco.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Category information for updating existing categories. */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class FeedCategoryUpdate {
    public static final String SERIALIZED_NAME_SLUG = "slug";

    @SerializedName(SERIALIZED_NAME_SLUG)
    private String slug;

    public static final String SERIALIZED_NAME_SOURCE = "source";

    @SerializedName(SERIALIZED_NAME_SOURCE)
    private Source source;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_FAMILIES = "families";

    @SerializedName(SERIALIZED_NAME_FAMILIES)
    private List<String> families;

    public FeedCategoryUpdate() {}

    public FeedCategoryUpdate slug(String slug) {
        this.slug = slug;
        return this;
    }

    /**
     * Category slug using hierarchical format with forward slashes to represent parent-child
     * relationships. String can contain only lowercase letters, numbers, and hyphens. Examples:
     * &#39;men&#39;, &#39;men/clothing&#39;, &#39;men/clothing/pants&#39;
     *
     * @return slug
     */
    @javax.annotation.Nonnull
    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public FeedCategoryUpdate source(Source source) {
        this.source = source;
        return this;
    }

    /**
     * Get source
     *
     * @return source
     */
    @javax.annotation.Nonnull
    public Source getSource() {
        return source;
    }

    public void setSource(Source source) {
        this.source = source;
    }

    public FeedCategoryUpdate name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Display name of the category
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public FeedCategoryUpdate families(List<String> families) {
        this.families = families;
        return this;
    }

    public FeedCategoryUpdate addFamiliesItem(String familiesItem) {
        if (this.families == null) {
            this.families = new ArrayList<>();
        }
        this.families.add(familiesItem);
        return this;
    }

    /**
     * Optional array of product family identifiers that this category is associated with. Used for
     * enhanced product organization and filtering. For example, for a clothing category, you can
     * associate it with the \&quot;apparel\&quot; family. Note: This field uses the replace
     * strategy to replace the entire array with the new values.
     *
     * @return families
     */
    @javax.annotation.Nullable
    public List<String> getFamilies() {
        return families;
    }

    public void setFamilies(List<String> families) {
        this.families = families;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedCategoryUpdate feedCategoryUpdate = (FeedCategoryUpdate) o;
        return Objects.equals(this.slug, feedCategoryUpdate.slug)
                && Objects.equals(this.source, feedCategoryUpdate.source)
                && Objects.equals(this.name, feedCategoryUpdate.name)
                && Objects.equals(this.families, feedCategoryUpdate.families);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(slug, source, name, families);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedCategoryUpdate {\n");
        sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    families: ").append(toIndentedString(families)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("slug");
        openapiFields.add("source");
        openapiFields.add("name");
        openapiFields.add("families");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("slug");
        openapiRequiredFields.add("source");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FeedCategoryUpdate
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FeedCategoryUpdate.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FeedCategoryUpdate is not found in the empty JSON string",
                                FeedCategoryUpdate.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FeedCategoryUpdate.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FeedCategoryUpdate` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FeedCategoryUpdate.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("slug").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `slug` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("slug").toString()));
        }
        // validate the required field `source`
        Source.validateJsonElement(jsonObj.get("source"));
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("name").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("families") != null
                && !jsonObj.get("families").isJsonNull()
                && !jsonObj.get("families").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `families` to be an array in the JSON string but got `%s`",
                            jsonObj.get("families").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FeedCategoryUpdate.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FeedCategoryUpdate' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FeedCategoryUpdate> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FeedCategoryUpdate.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FeedCategoryUpdate>() {
                        @Override
                        public void write(JsonWriter out, FeedCategoryUpdate value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FeedCategoryUpdate read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FeedCategoryUpdate given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FeedCategoryUpdate
     * @throws IOException if the JSON string is invalid with respect to FeedCategoryUpdate
     */
    public static FeedCategoryUpdate fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FeedCategoryUpdate.class);
    }

    /**
     * Convert an instance of FeedCategoryUpdate to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
