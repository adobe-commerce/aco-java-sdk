/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/

package com.adobe.aco.model;

import com.adobe.aco.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Product price information. */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2025-05-23T13:16:12.231143+02:00[Europe/Madrid]",
        comments = "Generator version: 7.4.0")
public class FeedPrices {
    public static final String SERIALIZED_NAME_SKU = "sku";

    @SerializedName(SERIALIZED_NAME_SKU)
    private String sku;

    public static final String SERIALIZED_NAME_PRICE_BOOK_ID = "priceBookId";

    @SerializedName(SERIALIZED_NAME_PRICE_BOOK_ID)
    private String priceBookId;

    public static final String SERIALIZED_NAME_REGULAR = "regular";

    @SerializedName(SERIALIZED_NAME_REGULAR)
    private Float regular;

    public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";

    @SerializedName(SERIALIZED_NAME_DISCOUNTS)
    private List<FeedPricesDiscountsInner> discounts;

    public FeedPrices() {}

    public FeedPrices sku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Product SKU
     *
     * @return sku
     */
    @javax.annotation.Nonnull
    public String getSku() {
        return sku;
    }

    public void setSku(String sku) {
        this.sku = sku;
    }

    public FeedPrices priceBookId(String priceBookId) {
        this.priceBookId = priceBookId;
        return this;
    }

    /**
     * Price book id
     *
     * @return priceBookId
     */
    @javax.annotation.Nonnull
    public String getPriceBookId() {
        return priceBookId;
    }

    public void setPriceBookId(String priceBookId) {
        this.priceBookId = priceBookId;
    }

    public FeedPrices regular(Float regular) {
        this.regular = regular;
        return this;
    }

    /**
     * Regular price
     *
     * @return regular
     */
    @javax.annotation.Nonnull
    public Float getRegular() {
        return regular;
    }

    public void setRegular(Float regular) {
        this.regular = regular;
    }

    public FeedPrices discounts(List<FeedPricesDiscountsInner> discounts) {
        this.discounts = discounts;
        return this;
    }

    public FeedPrices addDiscountsItem(FeedPricesDiscountsInner discountsItem) {
        if (this.discounts == null) {
            this.discounts = new ArrayList<>();
        }
        this.discounts.add(discountsItem);
        return this;
    }

    /**
     * Active discounts
     *
     * @return discounts
     */
    @javax.annotation.Nullable
    public List<FeedPricesDiscountsInner> getDiscounts() {
        return discounts;
    }

    public void setDiscounts(List<FeedPricesDiscountsInner> discounts) {
        this.discounts = discounts;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedPrices feedPrices = (FeedPrices) o;
        return Objects.equals(this.sku, feedPrices.sku)
                && Objects.equals(this.priceBookId, feedPrices.priceBookId)
                && Objects.equals(this.regular, feedPrices.regular)
                && Objects.equals(this.discounts, feedPrices.discounts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sku, priceBookId, regular, discounts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedPrices {\n");
        sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
        sb.append("    priceBookId: ").append(toIndentedString(priceBookId)).append("\n");
        sb.append("    regular: ").append(toIndentedString(regular)).append("\n");
        sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sku");
        openapiFields.add("priceBookId");
        openapiFields.add("regular");
        openapiFields.add("discounts");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sku");
        openapiRequiredFields.add("priceBookId");
        openapiRequiredFields.add("regular");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FeedPrices
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FeedPrices.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FeedPrices is not found in the empty JSON string",
                                FeedPrices.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FeedPrices.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FeedPrices` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FeedPrices.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sku` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("sku").toString()));
        }
        if (!jsonObj.get("priceBookId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceBookId` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("priceBookId").toString()));
        }
        if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
            JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
            if (jsonArraydiscounts != null) {
                // ensure the json data is an array
                if (!jsonObj.get("discounts").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `discounts` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("discounts").toString()));
                }

                // validate the optional field `discounts` (array)
                for (int i = 0; i < jsonArraydiscounts.size(); i++) {
                    FeedPricesDiscountsInner.validateJsonElement(jsonArraydiscounts.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FeedPrices.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FeedPrices' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FeedPrices> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FeedPrices.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FeedPrices>() {
                        @Override
                        public void write(JsonWriter out, FeedPrices value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FeedPrices read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FeedPrices given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FeedPrices
     * @throws IOException if the JSON string is invalid with respect to FeedPrices
     */
    public static FeedPrices fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FeedPrices.class);
    }

    /**
     * Convert an instance of FeedPrices to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
