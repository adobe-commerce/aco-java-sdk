/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/

package com.adobe.aco.model;

import com.adobe.aco.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class FeedPricebook extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(FeedPricebook.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FeedPricebook.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FeedPricebook' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PriceBookBase> adapterPriceBookBase =
                    gson.getDelegateAdapter(this, TypeToken.get(PriceBookBase.class));
            final TypeAdapter<PriceBookChild> adapterPriceBookChild =
                    gson.getDelegateAdapter(this, TypeToken.get(PriceBookChild.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FeedPricebook>() {
                        @Override
                        public void write(JsonWriter out, FeedPricebook value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `PriceBookBase`
                            if (value.getActualInstance() instanceof PriceBookBase) {
                                JsonElement element =
                                        adapterPriceBookBase.toJsonTree(
                                                (PriceBookBase) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `PriceBookChild`
                            if (value.getActualInstance() instanceof PriceBookChild) {
                                JsonElement element =
                                        adapterPriceBookChild.toJsonTree(
                                                (PriceBookChild) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas: PriceBookBase, PriceBookChild");
                        }

                        @Override
                        public FeedPricebook read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize PriceBookBase
                            try {
                                // validate the JSON object to see if any exception is thrown
                                PriceBookBase.validateJsonElement(jsonElement);
                                actualAdapter = adapterPriceBookBase;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'PriceBookBase'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for PriceBookBase failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'PriceBookBase'",
                                        e);
                            }
                            // deserialize PriceBookChild
                            try {
                                // validate the JSON object to see if any exception is thrown
                                PriceBookChild.validateJsonElement(jsonElement);
                                actualAdapter = adapterPriceBookChild;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'PriceBookChild'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for PriceBookChild failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'PriceBookChild'",
                                        e);
                            }

                            if (match == 1) {
                                FeedPricebook ret = new FeedPricebook();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for FeedPricebook: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FeedPricebook() {
        super("oneOf", Boolean.FALSE);
    }

    public FeedPricebook(PriceBookBase o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public FeedPricebook(PriceBookChild o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PriceBookBase", PriceBookBase.class);
        schemas.put("PriceBookChild", PriceBookChild.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FeedPricebook.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: PriceBookBase, PriceBookChild
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PriceBookBase) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PriceBookChild) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PriceBookBase, PriceBookChild");
    }

    /**
     * Get the actual instance, which can be the following: PriceBookBase, PriceBookChild
     *
     * @return The actual instance (PriceBookBase, PriceBookChild)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PriceBookBase`. If the actual instance is not `PriceBookBase`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PriceBookBase`
     * @throws ClassCastException if the instance is not `PriceBookBase`
     */
    public PriceBookBase getPriceBookBase() throws ClassCastException {
        return (PriceBookBase) super.getActualInstance();
    }

    /**
     * Get the actual instance of `PriceBookChild`. If the actual instance is not `PriceBookChild`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PriceBookChild`
     * @throws ClassCastException if the instance is not `PriceBookChild`
     */
    public PriceBookChild getPriceBookChild() throws ClassCastException {
        return (PriceBookChild) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FeedPricebook
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PriceBookBase
        try {
            PriceBookBase.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for PriceBookBase failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PriceBookChild
        try {
            PriceBookChild.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for PriceBookChild failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for FeedPricebook with oneOf schemas: PriceBookBase, PriceBookChild. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FeedPricebook given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FeedPricebook
     * @throws IOException if the JSON string is invalid with respect to FeedPricebook
     */
    public static FeedPricebook fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FeedPricebook.class);
    }

    /**
     * Convert an instance of FeedPricebook to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
