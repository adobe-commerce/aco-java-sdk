/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/

package com.adobe.aco.model;

import com.adobe.aco.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Model400ProcessFeedResponse */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class Model400ProcessFeedResponse {
    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status = "FAILED";

    public static final String SERIALIZED_NAME_MESSAGE = "message";

    @SerializedName(SERIALIZED_NAME_MESSAGE)
    private String message;

    public static final String SERIALIZED_NAME_ERRORS = "errors";

    @SerializedName(SERIALIZED_NAME_ERRORS)
    private List<FeedItemFailedValidationResult> errors;

    public Model400ProcessFeedResponse() {}

    public Model400ProcessFeedResponse status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Request status.
     *
     * @return status
     */
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Model400ProcessFeedResponse message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Error summary.
     *
     * @return message
     */
    @javax.annotation.Nullable
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Model400ProcessFeedResponse errors(List<FeedItemFailedValidationResult> errors) {
        this.errors = errors;
        return this;
    }

    public Model400ProcessFeedResponse addErrorsItem(FeedItemFailedValidationResult errorsItem) {
        if (this.errors == null) {
            this.errors = new ArrayList<>();
        }
        this.errors.add(errorsItem);
        return this;
    }

    /**
     * List of items that did not pass validation. Fix the payload for invalid items before
     * resubmitting the request.
     *
     * @return errors
     */
    @javax.annotation.Nullable
    public List<FeedItemFailedValidationResult> getErrors() {
        return errors;
    }

    public void setErrors(List<FeedItemFailedValidationResult> errors) {
        this.errors = errors;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Model400ProcessFeedResponse _400processFeedResponse = (Model400ProcessFeedResponse) o;
        return Objects.equals(this.status, _400processFeedResponse.status)
                && Objects.equals(this.message, _400processFeedResponse.message)
                && Objects.equals(this.errors, _400processFeedResponse.errors);
    }

    @Override
    public int hashCode() {
        return Objects.hash(status, message, errors);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Model400ProcessFeedResponse {\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("status");
        openapiFields.add("message");
        openapiFields.add("errors");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     Model400ProcessFeedResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Model400ProcessFeedResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Model400ProcessFeedResponse is not found in the empty JSON string",
                                Model400ProcessFeedResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Model400ProcessFeedResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `Model400ProcessFeedResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull())
                && !jsonObj.get("message").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `message` to be a primitive type in the JSON string but got `%s`",
                            jsonObj.get("message").toString()));
        }
        if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
            JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
            if (jsonArrayerrors != null) {
                // ensure the json data is an array
                if (!jsonObj.get("errors").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `errors` to be an array in the JSON string but got `%s`",
                                    jsonObj.get("errors").toString()));
                }

                // validate the optional field `errors` (array)
                for (int i = 0; i < jsonArrayerrors.size(); i++) {
                    FeedItemFailedValidationResult.validateJsonElement(jsonArrayerrors.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Model400ProcessFeedResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Model400ProcessFeedResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Model400ProcessFeedResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Model400ProcessFeedResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Model400ProcessFeedResponse>() {
                        @Override
                        public void write(JsonWriter out, Model400ProcessFeedResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Model400ProcessFeedResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Model400ProcessFeedResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Model400ProcessFeedResponse
     * @throws IOException if the JSON string is invalid with respect to Model400ProcessFeedResponse
     */
    public static Model400ProcessFeedResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Model400ProcessFeedResponse.class);
    }

    /**
     * Convert an instance of Model400ProcessFeedResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
