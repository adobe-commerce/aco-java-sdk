/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 * <p>
 *  Copyright 2025 Adobe
 *  All Rights Reserved.
 * <p>
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * using custom templates. Generator configuration can be found in the /generator directory.
 * <p>
 * Do not edit this file manually!
 **************************************************************************/
package com.adobe.aco.client;

import com.adobe.aco.http.CommerceHttpClient;
import com.adobe.aco.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.util.List;

public class ClientImpl implements Client {
    private final CommerceHttpClient http;
    private final ObjectMapper mapper = new ObjectMapper();

    public ClientImpl(CommerceHttpClient http) {
        this.http = http;
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse createCategories(List<FeedCategory> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/categories", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/categories failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse deleteCategories(List<FeedCategoryDelete> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request(
                    "/v1/catalog/categories/delete", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/categories/delete failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse updateCategories(List<FeedCategoryUpdate> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("PATCH", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/categories", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/categories failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse createProductMetadata(List<FeedMetadata> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request(
                    "/v1/catalog/products/metadata", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/metadata failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse deleteProductMetadata(List<FeedMetadataDelete> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request(
                    "/v1/catalog/products/metadata/delete", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/metadata/delete failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse updateProductMetadata(List<FeedMetadataUpdate> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("PATCH", BodyPublishers.ofString(body));

            return http.request(
                    "/v1/catalog/products/metadata", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/metadata failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse createPriceBooks(List<FeedPricebook> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/price-books", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/price-books failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse deletePriceBooks(List<FeedPriceBookDelete> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request(
                    "/v1/catalog/price-books/delete", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/price-books/delete failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse updatePriceBooks(List<FeedPricebook> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("PATCH", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/price-books", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/price-books failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse createPrices(List<FeedPrices> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/products/prices", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/prices failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse deletePrices(List<FeedPricesDelete> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request(
                    "/v1/catalog/products/prices/delete", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/prices/delete failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse updatePrices(List<FeedPricesUpdate> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("PATCH", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/products/prices", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/prices failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse createProducts(List<FeedProduct> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/products", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse deleteProducts(List<FeedProductDelete> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("POST", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/products/delete", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products/delete failed", e);
        }
    }

    /** {@inheritDoc} */
    @Override
    public ProcessFeedResponse updateProducts(List<FeedProductUpdate> data) {
        try {
            String body = mapper.writeValueAsString(data);
            HttpRequest.Builder builder =
                    HttpRequest.newBuilder().method("PATCH", BodyPublishers.ofString(body));

            return http.request("/v1/catalog/products", builder, ProcessFeedResponse.class);
        } catch (Exception e) {
            throw new RuntimeException("Request to /v1/catalog/products failed", e);
        }
    }
}
